# make fzf use rg and include hidden files
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden -g "!{node_modules/*,.git/*}"'

mkcd(){
    mkdir $1 && cd $1
}

# create document in vidoc folder with scratch functionality, naming, and stdin support 
doc(){      
    local target_path=$HOME/Documents/vdoc
    if [ -z "$1" ]; then
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path  )
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path < /dev/stdin)
            nvim $p
        fi

    else 
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path --file-name=$1)
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path --file-name=$1 < /dev/stdin)
            nvim $p
        fi
    fi
}

# pretty print csv file
csvcat(){
    column -s, -t < $1 | less -#2 -N -S
}

fif(){
    local RG_PREFIX='rg --column --line-number --no-heading --color=always --smart-case  -g "!{node_modules/*,.git/*}"'
    local INITIAL_QUERY="${*:-}"
    local fzf_result=$(FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
      fzf --ansi \
          --disabled \
          --query "$INITIAL_QUERY" \
          --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
    local result=${fzf_result%%:*}
    local line_no=$(echo $fzf_result | cut -d: -f2)

    if [ "x$result" != "x" ]; then
        nvim +$line_no $result
    fi
}

fdir_helper() {
    local patharg="$1"
    local hidden="$2"
    local preview="$3"
    local enteropt="$4"
    local oopt="$5"
    local output

    if [[ -n "$patharg" ]]; then
        if [ $hidden = true ]; then
            output=$(fd -u --type directory . "$patharg" | fzf --expect ctrl-o,ctrl-r,ctrl-f,enter --preview "$preview")
        else
            output=$(fd --type directory . "$patharg" | fzf --expect ctrl-o,ctrl-r,ctrl-f,enter --preview "$preview")
        fi
    else
        if [ $hidden = true ]; then
            output=$(fd -u --type directory | fzf --expect ctrl-o,ctrl-r,ctrl-f,enter --preview "$preview")
        else
            output=$(fd --type directory | fzf --expect ctrl-o,ctrl-r,ctrl-f,enter --preview "$preview")
        fi
    fi

    if [[ -z "$output" ]]; then
        return
    fi

    local key=$(echo "$output" | head -1)
    local val=$(echo "$output" | tail -1)

    case "$key" in
        enter)
            if [[ -n "$val" ]]; then
                $enteropt "$val"
            fi
            ;;
        ctrl-o)
            if [[ -n "$val" ]]; then
                $oopt "$val"
            fi
            ;;
        ctrl-r)
            fdir_helper "$val" "$hidden" "$preview" "$enteropt" "$oopt"
            ;;
        ctrl-f)
            cd $val && fif && cd -
            ;;
    esac
}

fdir() {
    local preview='exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension'
    fdir_helper "$1" false "$preview" "cd" "nvim"
}

fdir-all() {
    local preview='exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension'
    fdir_helper "$1" true "$preview" "cd" "nvim"
}

ff_helper() {
    local patharg="$1"
    local hidden="$2"
    local preview="$3"
    local enteropt="$4"
    local oopt="$5"
    local output

    if [[ -n "$patharg" ]]; then
        if [ $hidden = true ]; then
            output=$(fd -u --type file . "$patharg" | fzf --expect ctrl-o,enter --preview "$preview")
        else
            output=$(fd --type file . "$patharg" | fzf --expect ctrl-o,enter --preview "$preview")
        fi
    else
        if [ $hidden = true ]; then
            output=$(fd -u --type file | fzf --expect ctrl-o,enter --preview "$preview")
        else
            output=$(fd --type file | fzf --expect ctrl-o,enter --preview "$preview")
        fi
    fi

    if [[ -z "$output" ]]; then
        return
    fi

    local key=$(echo "$output" | head -1)
    local val=$(echo "$output" | tail -1)

    case "$key" in
        enter)
            if [[ -n "$val" ]]; then
                $enteropt "$val"
            fi
            ;;
        ctrl-o)
            if [[ -n "$val" ]]; then
                $oopt $(dirname "$val")
            fi
            ;;
    esac
}


ff() {
    local preview="bat --color=always --style=numbers --line-range :500 {}"
    ff_helper "$1" false "$preview" "nvim" "cd"
}

ff-all() {

    local preview="bat --color=always --style=numbers --line-range :500 {}"
    ff_helper "$1" true "$preview" "nvim" "cd"
}

private search_and_cd(){
    cd $(fd -u -d 1 --type directory . $1 | fzf --preview "exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension")
}

fic(){
    search_and_cd $HOME/Code
}



# search unique file history and copy output to terminal 
fh(){
     print -z $( history | cut -c 8- | sort | uniq | fzf --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g') 
}

# Find program: search through executable command in path - preview with tldr page
fp(){
    local p=$(compgen -c | sed '/^_/d'| fzf --preview "tldr {}" --bind "?:preview:man {}")
    print -z $p
}

# search through processes and kill the selected one
# TODO: make output prettier (shorter)
fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}


lzcommit() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "You are not inside a Git repository."
        return
    fi

    if [ -z "$(git status --porcelain)" ]; then
        echo "No changes detected in the Git repository."
        return
    fi

    local msg=$(git -c pager.diff='less -R' diff | aichat --model "openai:gpt-3.5-turbo" 'Write me a succinct git commit messsage for these changes.' )
    echo $msg
    read -q "response?Do you want to commit? (y/n):"
    echo ""
    if [[ $response == "y" ]]; then
        git commit -am "$msg"
        echo "Committed!"
    elif [[ $response == "n" ]]; then
        echo "Not committed"
    else
        echo "Invalid response."
    fi
}

nix-installed(){
    nix-store -q --requisites /run/current-system

}

show-path(){
    local dir=$(tr ':' '\n' <<< "$PATH" | fzf --preview 'exa -1 {}')
    if [[ -n $dir ]]; then
        cd "$dir"
    else
        return
    fi
}

show-env(){
    env | cut -d '=' -f 1 | fzf --preview 'printenv {}'
}


