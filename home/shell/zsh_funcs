# make fzf use rg and include hidden files
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden -g "!{node_modules/*,.git/*}"'

alias fzf-default='fzf --bind "ctrl-j:preview-down,ctrl-k:preview-up,ctrl-d:preview-page-down,ctrl-u:preview-page-up"' 

mkcd(){
    mkdir $1 && cd $1
}

# create document in vidoc folder with scratch functionality, naming, and stdin support 
doc(){      
    local target_path=$HOME/Documents/vdoc
    if [ -z "$1" ]; then
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path  )
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path < /dev/stdin)
            nvim $p
        fi

    else 
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path --file-name=$1)
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path --file-name=$1 < /dev/stdin)
            nvim $p
        fi
    fi
}

# pretty print csv file
csvcat(){
    column -s, -t < $1 | less -#2 -N -S
}

fif(){
    local RG_PREFIX='rg --column --line-number --no-heading --color=always --smart-case  -g "!{node_modules/*,.git/*}"'
    local search_path="."
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -a)
                RG_PREFIX='rg --column --line-number --no-heading --color=always --smart-case --no-ignore --hidden -g "!{node_modules/*,.git/*}"'
                shift
                ;;
            *)
                if [[ -d "$1" ]]; then
                    search_path="$1"
                    shift
                else
                    break
                fi
                ;;
        esac
    done
    
    local INITIAL_QUERY="${*:-}"
    local fzf_result=$(FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY") $search_path" \
    fzf --ansi \
          --disabled \
          --query "$INITIAL_QUERY" \
          --bind "change:reload:sleep 0.1; $RG_PREFIX {q} $search_path || true" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3') 

    local result=${fzf_result%%:*}
    local line_no=$(echo $fzf_result | cut -d: -f2)

    if [ "x$result" != "x" ]; then
        nvim +$line_no $result
    fi
}

f() {
  emulate -L zsh

  # Default options
  local hidden=false

  # Parse flags
  local opt
  while getopts ":a" opt; do
    case $opt in
      a)
        hidden=true
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND - 1))

  # If there's a positional argument left, treat it as the path argument
  local patharg=$1

  # Construct the fd command
  local fd_cmd="fd "
  if [[ $hidden = true ]]; then
    fd_cmd="fd -u"
  fi

  # If a path argument was given, append it
  if [[ -n "$patharg" ]]; then
    # Note: quoting carefully so expansions happen correctly
    fd_cmd+=" . \"$patharg\""
  fi

  local preview_label='[ enter = cd/nvim, ctrl+o = cd, ctrl-n = nvim, ctrl-r = f, ctrl+f = fif ]'
  local preview_window='up,70%,border-bottom,+{2}+3/3,~3'
  # Run fd -> fzf with preview, capturing keypress + selection

  local output
  output=$(eval "$fd_cmd" | \
    fzf-default --preview '
      if [[ -f {} ]]; then 
        bat --color=always --style=numbers --line-range :500 '{}' 
      elif [[ -d {} ]]; then 
        exa {} -T -L 1 --long --git --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension 
      fi
        ' \
      --preview-window $preview_window \
      --prompt="> " \
      --expect ctrl-o,ctrl-r,ctrl-n,ctrl-f,enter \
      --preview-label $preview_label \
      )

  # If user presses <esc> or there's no selection, exit
  if [[ -z "$output" ]]; then
    return
  fi

  # Parse out the key and the selected directory
  local key val
  key=$(echo "$output" | head -1)
  val=$(echo "$output" | tail -1)

  if [[ ! -n "$val" ]]; then 
    return
  fi 

  # Act on the key pressed
  case "$key" in
    enter)
      if [[ -f "$val" ]]; then
        nvim "$val"
      elif [[ -d "$val" ]]; then
        cd "$val"
      else
        return
      fi
      ;;
    ctrl-o)
      if [[ -f "$val" ]]; then
        cd $(dirname "$val")
      elif [[ -d "$val" ]]; then
        cd "$val"
      else
        return
      fi
      ;;
    ctrl-n)
      nvim "$val"
      ;;
    ctrl-r)
      if [[ -f "$val" ]]; then
        f $(dirname "$val")
      elif [[ -d "$val" ]]; then
        f "$val"
      else
        return
      fi
      ;;
    ctrl-f)
      if [[ -f "$val" ]]; then
        fif $(dirname "$val")
      elif [[ -d "$val" ]]; then
        fif "$val"
      else
        return
      fi
      ;;
  esac
}

fdir() {
  emulate -L zsh

  # Default options
  local hidden=false
  local preview='exa {} -T -L 1 --long --git --colour=always --icons --no-permissions \
                 --no-time --no-user --no-filesize --group-directories-first --sort=extension'

  # Parse flags
  local opt
  while getopts ":a" opt; do
    case $opt in
      a)
        hidden=true
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND - 1))

  # If there's a positional argument left, treat it as the path argument
  local patharg=$1

  # Construct the fd command
  local fd_cmd="fd --type directory"
  if [[ $hidden = true ]]; then
    fd_cmd="fd -u --type directory"
  fi

  # If a path argument was given, append it
  if [[ -n "$patharg" ]]; then
    # Note: quoting carefully so expansions happen correctly
    fd_cmd+=" . \"$patharg\""
  fi

  local preview_label='[ enter = cd, ctrl+n = nvim, ctrl+s = ff, ctrl-r = fdir, ctrl+f = fif, ctrl-a = f ]'
  local preview_window='up,70%,border-bottom,+{2}+3/3,~3'
  # Run fd -> fzf with preview, capturing keypress + selection
  local output
  output=$(eval "$fd_cmd" | \
    fzf-default --preview "$preview" \
      --preview-window $preview_window \
      --expect ctrl-n,ctrl-r,ctrl-s,ctrl-f,ctrl-a,enter \
      --preview-label $preview_label \
      )

  # If user presses <esc> or there's no selection, exit
  if [[ -z "$output" ]]; then
    return
  fi


  # Parse out the key and the selected directory
  local key val
  key=$(echo "$output" | head -1)
  val=$(echo "$output" | tail -1)


  if [[ ! -n "$val" ]]; then 
   return 
  fi 

  # Act on the key pressed
  case "$key" in
    enter)
      cd "$val"
      ;;
    ctrl-n)
      nvim "$val"
      ;;
    ctrl-r)
      fdir "$val"
      ;;
    ctrl-s)
      ff "$val"
      ;;
    ctrl-f)
      fif "$val"
      ;;
    ctrl-a)
      f "$val"
      ;;
  esac
}

ff() {
  emulate -L zsh

  # Default options
  local hidden=false
  local preview="bat --color=always --style=numbers --line-range :500 {}"

  # Parse flags
  local opt
  while getopts ":a" opt; do
    case $opt in
      a)
        hidden=true
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND - 1))

  # If there's a positional argument left, treat it as the path argument
  local patharg=$1

  # Construct the fd command
  local fd_cmd="fd --type file"
  if [[ $hidden = true ]]; then
    fd_cmd="fd -u --type file"
  fi

  # If a path argument was given, append it
  if [[ -n "$patharg" ]]; then
    fd_cmd+=" . \"$patharg\""
  fi

  local preview_label='[ enter = nvim, ctrl+o = cd, ctrl+s = fdir, ctrl-r = ff, ctrl+f = fif, ctrl-a = f ]'
  # Run fd -> fzf
  local output
  output=$(eval "$fd_cmd" | \
    fzf-default \
      --expect ctrl-o,ctrl-s,ctrl-f,enter \
      --preview "$preview" \
      --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
      --preview-label $preview_label )

  # If user presses <esc> or there's no selection, exit
  if [[ -z "$output" ]]; then
    return
  fi

  # Parse out the key and the selected file
  local key val
  key=$(echo "$output" | head -1)
  val=$(echo "$output" | tail -1)

  if [[ ! -n "$val" ]]; then
    return
  fi

  # Act on the key pressed
  case "$key" in
    enter)
      nvim "$val"
      ;;
    ctrl-o)
      cd "$(dirname "$val")"
      ;;
    ctrl-r)
      ff "$(dirname "$val")"
      ;;
    ctrl-s)
      fdir "$(dirname "$val")"
      ;;
    ctrl-f)
      fif "$(dirname "$val")"
      ;;
    ctrl-a)
      f "$(dirname "$val")"
      ;;
  esac
}


fic(){
  local preview='exa $HOME/Code/{} -T -L 1 --long --git --colour=always --icons --no-permissions \
                 --no-time --no-user --no-filesize --group-directories-first --sort=extension'
  local preview_label='[ enter = cd, ctrl+n = nvim, ctrl+s = ff, ctrl-r = fdir, ctrl+f = fif, ctrl-a = f ]'
  local preview_window='up,70%,border-bottom,+{2}+3/3,~3'
  output=$(ls  "$HOME/Code" | \
    fzf-default --preview "$preview" \
      --preview-window $preview_window \
      --expect ctrl-n,ctrl-r,ctrl-s,ctrl-f,ctrl-a,enter \
      --preview-label $preview_label \
      )

  # If user presses <esc> or there's no selection, exit
  if [[ -z "$output" ]]; then
    return
  fi


  # Parse out the key and the selected directory
  local key val
  key=$(echo "$output" | head -1)
  val=$(echo "$output" | tail -1)


  if [[ ! -n "$val" ]]; then 
   return 
  fi 

  # Act on the key pressed
  case "$key" in
    enter)
      cd "$HOME/Code/$val"
      ;;
    ctrl-n)
      nvim "$HOME/Code/$val"
      ;;
    ctrl-r)
      fdir "$HOME/Code/$val"
      ;;
    ctrl-s)
      ff "$HOME/Code/$val"
      ;;
    ctrl-f)
      fif "$HOME/Code/$val"
      ;;
    ctrl-a)
      f "$HOME/Code/$val"
      ;;
  esac

}


# search unique file history and copy output to terminal 
fh(){
  local result=$(atuin history list --cmd-only | sort | uniq | fzf-default --tac) 
  [[ -n "$result" ]] && print -z "$result"
}

# Find program: search through executable command in path - preview with tldr page
fp(){
    local preview_window='up,70%,border-bottom,+{2}+3/3,~3'
    local p=$(compgen -c | sed '/^_/d' | sort |  \
      fzf-default --preview "tldr {}" \
      --bind "?:preview:man {}" \
      --preview-label '[ enter = print cmd, ? = preview man, ctrl-v = open man ]' \
      --preview-window $preview_window \
      --expect enter,ctrl-v)

    local key val
    key=$(echo "$p" | head -1)
    val=$(echo "$p" | tail -1)

    case "$key" in 
      enter) 
        [[ -n "$val" ]] && print -z "$val"
        ;;
      ctrl-v) 
        [[ -n "$val" ]] && man "$val"
        ;;
    esac
    
}

# search through processes and kill the selected one
fkill() {
    local pid header ps_cmd

    if [ "$UID" != "0" ]; then
        ps_cmd=(ps -o pid=PID,user=USER,pcpu=%CPU,pmem=%MEM,time=TIME,comm=COMMAND -u "$UID")
    else
        ps_cmd=(ps -eo pid=PID,user=USER,pcpu=%CPU,pmem=%MEM,time=TIME,comm=COMMAND)
    fi

    # Use a file descriptor to capture the header and body
    exec 3< <("${ps_cmd[@]}")
    IFS= read -r header <&3
    pid=$(cat <&3 | fzf --header="$header" -m | awk '{print $1}')
    exec 3<&-

    if [ -n "$pid" ]; then
        echo "$pid" | xargs kill -${1:-9}
    fi
}

lzc() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "You are not inside a Git repository."
        return
    fi

    if [ -z "$(git status --porcelain)" ]; then
        echo "No changes detected in the Git repository."
        return
    fi

    local msg=$(git -c pager.diff='less -R' diff | aichat --model "openai:gpt-3.5-turbo" 'Write me a succinct git commit messsage for these changes.' )
    echo $msg
    read -q "response?Do you want to commit? (y/n):"
    echo ""
    if [[ $response == "y" ]]; then
        git commit -am "$msg"
        echo "Committed!"
    elif [[ $response == "n" ]]; then
        echo "Not committed"
    else
        echo "Invalid response."
    fi
}

fnix() {
  local result=$(nix-store -q --requisites /run/current-system | fzf)
  [[ -n "$result" ]] && cd "$result"
}

fpath(){
    local dir=$(tr ':' '\n' <<< "$PATH" | fzf-default --preview 'exa -1 {}')
    [[ -n $dir ]] && cd "$dir"
}

fenv(){
    env | cut -d '=' -f 1 | fzf-default --preview 'printenv {}'
}

mkcode(){
    if [ -z "$1" ]; then
        echo "You must specify a directory name."
        return 1
    fi

    mkdir -p "$HOME/Code/$1"
    cd "$HOME/Code/$1"
}

function gi() {
    local templates=$(curl -sL "https://www.toptal.com/developers/gitignore/api/list" | tr "," "\n")
    local selections=$(echo "$templates" | fzf-default -m --height=40% --preview="curl -sL https://www.toptal.com/developers/gitignore/api/{}")
    
    if [[ -n "$selections" ]]; then
        if [[ -f ".gitignore" ]]; then
            echo "" >> .gitignore  # Ensure there is a newline at the end of the existing file
            echo "# Added on $(date)" >> .gitignore  # Optionally, add a comment indicating when new sections were added
        fi
        echo "$selections" | xargs -I {} curl -sL "https://www.toptal.com/developers/gitignore/api/{}" >> .gitignore
        echo ".gitignore file updated successfully."
    else
        echo "No selections made. No changes to .gitignore."
    fi
}



private function get_system_arch() {
  local arch=$(uname -m)  # Get machine architecture (e.g., aarch64, x86_64)
  local os=$(uname -s)    # Get operating system (e.g., Darwin, Linux)

  if [[ $arch == "arm64" && $os == "Darwin" ]]; then
    echo "aarch64-darwin"
  elif [[ $arch == "x86_64" && $os == "Linux" ]]; then
    echo "x86_64-linux"
  else
    echo "unknown system"
  fi
}


## Warning! use carefully
private function cleanup_old_dirs() {
  local target_dir=$(realpath "$1")

  # Safety check: ensure target_dir starts with $HOME/
  if [[ ! "$target_dir" =~ ^"$HOME"/.* ]]; then
    echo "Can only cleanup sub-directories in $HOME!"
    return 1
  fi

  # Exit if target_dir is not a hidden directory (doesn't start with a dot)
  if [[ ! "$(basename "$target_dir")" =~ ^\..* ]]; then
    echo "Can only cleanup hidden directories!"
    return 1
  fi

  # Get today's date in YYYY-MM-DD format
  local today=$(date +"%Y-%m-%d")
  
  # Find and remove old date-formatted files
  for file in "$target_dir"/*; do
    if [[ -f "$file" ]]; then
      local filename=$(basename "$file")
      # Check if filename matches YYYY-MM-DD format and is not today
      if [[ "$filename" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ && "$filename" != "$today" ]]; then
        echo "Cleaning up old file: $(basename $file)"
        rm -f "$file"
      fi
    fi
  done
}


function fshell(){
  local nix_env_cache="$HOME/Documents/.nix-env-cache" 
  if [[ ! -d "$nix_env_cache" ]]; then
    mkdir -p "$nix_env_cache"
  else
    cleanup_old_dirs $nix_env_cache .
  fi
  local today_file=$(date +"%Y-%m-%d")
  local file_path="$nix_env_cache/$today_file"

  if [[ ! -f $file_path ]]; then
    nix-env -qaP --json > "$file_path"
  fi

  local result=$(cat "$file_path" \
    | jq -r "to_entries | map(select(.value.system == \"$(get_system_arch)\")) | .[].value.pname" \
    | fzf -m \
      --preview 'tldr {}' \
      --preview-window 'up,65%,border-bottom,+{2}+3/3,~3' \
    | tr '\n' ' ') 


  [[ -n "$result" ]] && eval "nix-shell -p $result"
}

function get_flake() {
  # Make sure we got an argument.
  if [[ -z "$1" ]]; then
    echo "Usage: get_flake <directory>"
    return 1
  fi

  local flake_name="$1"
  local flakes_dir="$HOME/Code/flakes"
  local local_flake_dir="$flakes_dir/$flake_name"
  local local_flake_file="$local_flake_dir/flake.nix"
  local remote_flake_url="https://raw.githubusercontent.com/HPRIOR/flakes/refs/heads/main/$flake_name/flake.nix"

  # If $HOME/Code/flakes exists and contains the requested flake, use it.
  if [[ -d "$flakes_dir" && -f "$local_flake_file" ]]; then
    cp "$local_flake_file" .
    echo "Flake '$flake_name' copied from $local_flake_dir to current directory."

  else
    # Otherwise, fetch from GitHub.
    echo "Local flake not found for '$flake_name'. Attempting to fetch from GitHub..."

    # Use curl in a way that fails on HTTP errors. If this fails, we fall back to an error message.
    if curl -fsSL "$remote_flake_url" -o flake.nix; then
      echo "Flake '$flake_name' retrieved from GitHub and saved to 'flake.nix'."
    else
      echo "Error: could not find flake '$flake_name' locally or on GitHub."
      return 1
    fi
  fi

  # Log a message reminding user to commit if they're in a git repo.
  echo "Remember to commit 'flake.nix'."
}



# ------------------------------------------------------------------
# claude-worktree  <issue‑number>
#   Create a git worktree for a GitHub issue and launch Claude
# ------------------------------------------------------------------
function claude-worktree() {
  emulate -L zsh          # isolate options from the parent shell
  set -u                  # error on unset vars
  set -o pipefail         # fail a pipeline if any part fails

  # -------- helper ------------------------------------------------
  die() { print -u2 "❌ $*"; return 1 }

  # -------- pre‑flight checks ------------------------------------
  (( $# == 1 )) || die "Usage: gh_issue_worktree <issue‑number>"
  local issue_number=$1

  for cmd in gh git claude; do
    command -v "$cmd" >/dev/null 2>&1 || die "Required command '$cmd' not found"
  done

  git rev-parse --is-inside-work-tree >/dev/null 2>&1 \
    || die "Not inside a git repository"

  # -------- fetch the issue title --------------------------------
  local issue_title
  if ! issue_title=$(gh issue view "$issue_number" --json title --jq .title 2>/dev/null); then
    die "GitHub issue #$issue_number not found"
  fi

  # -------- slugify the title ------------------------------------
  local slug
  slug=$(print -r -- "$issue_title" \
          | tr '[:upper:]' '[:lower:]' \
          | sed -E 's/[^a-z0-9]+/_/g; s/^_+//; s/_+$//; s/__+/_/g')

  local worktree_dir="../worktrees/${issue_number}-${slug}"
  local branch_name="issue/${issue_number}-${slug}"

  [[ -e $worktree_dir ]] && die "Worktree path $worktree_dir already exists"

  # -------- create the worktree ----------------------------------
  print "➕ Adding worktree $worktree_dir on branch $branch_name"
  git worktree add "$worktree_dir" -b "$branch_name"

  # -------- launch Claude ----------------------------------------
  cd "$worktree_dir"
  if [[ -f "flake.nix" ]]; then
    print "🔧 flake.nix detected – launching Claude in nix develop environment"
    nix develop --command claude "/fix-github-issue $issue_number"
  else
    print "🚀 Launching Claude in $worktree_dir"
    claude "/fix-github-issue $issue_number"
  fi
}

# ------------------------------------------------------------------
# github-issue  <issue‑number>
#   Create a new directory for a GitHub issue and launch Claude
# ------------------------------------------------------------------
function claude-issue() {
  emulate -L zsh          # isolate options from the parent shell
  set -u                  # error on unset vars
  set -o pipefail         # fail a pipeline if any part fails

  # -------- helper ------------------------------------------------
  die() { print -u2 "❌ $*"; return 1 }

  # -------- pre‑flight checks ------------------------------------
  (( $# == 1 )) || die "Usage: github-issue <issue‑number>"
  local issue_number=$1

  for cmd in gh git claude; do
    command -v "$cmd" >/dev/null 2>&1 || die "Required command '$cmd' not found"
  done

  git rev-parse --is-inside-work-tree >/dev/null 2>&1 \
    || die "Not inside a git repository"

  # -------- fetch the issue title --------------------------------
  local issue_title
  if ! issue_title=$(gh issue view "$issue_number" --json title --jq .title 2>/dev/null); then
    die "GitHub issue #$issue_number not found"
  fi

  # -------- slugify the title ------------------------------------
  local issue_name
  issue_name=$(print -r -- "$issue_title" \
          | tr '[:upper:]' '[:lower:]' \
          | sed -E 's/[^a-z0-9]+/_/g; s/^_+//; s/_+$//; s/__+/_/g')

  # -------- determine agent number -------------------------------
  local agents_dir="$HOME/Agents"
  mkdir -p "$agents_dir"
  
  local agent_number=1
  local base_pattern="${issue_number}-${issue_name}"
  
  while [[ -d "$agents_dir/${base_pattern}-${agent_number}" ]]; do
    ((agent_number++))
  done

  local target_dir="$agents_dir/${base_pattern}-${agent_number}"
  local branch_name="${issue_number}-${issue_name}"

  # -------- get git remote origin --------------------------------
  local git_remote
  if ! git_remote=$(git remote get-url origin 2>/dev/null); then
    die "No 'origin' remote found in current repository"
  fi

  # -------- clone repository to target directory ----------------
  print "📁 Creating directory: $target_dir"
  print "🔄 Cloning repository from origin/main..."
  
  if ! git clone "$git_remote" "$target_dir"; then
    die "Failed to clone repository"
  fi

  # -------- setup new branch ------------------------------------
  cd "$target_dir"
  
  print "🌿 Creating and checking out branch: $branch_name"
  git checkout -b "$branch_name"

  # -------- launch Claude ----------------------------------------
  # Define allowed tools list for better readability and maintenance
  local allowed_tools=(
    "Bash(cargo build:*)"
    "Bash(cargo check:*)"
    "Bash(cargo clippy:*)"
    "Bash(cargo fmt:*)"
    "Bash(cargo run:*)"
    "Bash(cargo search:*)"
    "Bash(cargo test:*)"
    "Bash(cd:*)"
    "Bash(echo:*)"
    "Bash(find:*)"
    "Bash(gh issue view:*)"
    "Bash(gh pr create:*)"
    "Bash(gh repo view:*)"
    "Bash(git add:*)"
    "Bash(git commit:*)"
    "Bash(git push:*)"
    "Bash(git:*)"
    "Bash(ls:*)"
    "Bash(mkdir:*)"
    "Bash(nix develop:*)"
    "Bash(nix flake check:*)"
    "Bash(nix flake update:*)"
    "Bash(nix-hash:*)"
    "Bash(nix-prefetch-url:*)"
    "Bash(pwd)"
    "Bash(npm test:*)"
    "Bash(npx expo lint:*)"
    "Bash(npx prettier:*)"
    "Bash(rm:*)"
    "Edit"
    "MultiEdit"
    "WebFetch"
    "WebSearch"
    "Write"
  )
  
  # Build the claude command with allowedTools
  local claude_cmd="claude --permission-mode plan --allowedTools"
  for tool in "${allowed_tools[@]}"; do
    claude_cmd+=" \"$tool\""
  done
  claude_cmd+=" -- \"/fix-github-issue $issue_number\""
  
  if [[ -f "flake.nix" ]]; then
    print "🔧 flake.nix detected – launching Claude in nix develop environment"
    nix develop --command sh -c "$claude_cmd"
  else
    print "🚀 Launching Claude..."
    eval "$claude_cmd"
  fi
}
