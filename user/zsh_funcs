# make fzf use rg and include hidden files
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden -g "!{node_modules/*,.git/*}"'


mkcd(){
    mkdir $1 && cd $1
}

# create document in vidoc folder with scratch functionality, naming, and stdin support 
doc(){      
    local target_path=$HOME/Documents/vdoc
    if [ -z "$1" ]; then
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path  )
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path < /dev/stdin)
            nvim $p
        fi

    else 
        if (( $# == 0 )) ; then
            local p=$(vdoc --target-path=$target_path --file-name=$1)
            nvim $p
        else
            local p=$(vdoc --target-path=$target_path --file-name=$1 < /dev/stdin)
            nvim $p
        fi
    fi
}

vedit(){
    if [ -z "$1" ]; then
        echo "No file provided"
    else 
        nvim $HOME/Documents/vdoc/$1
    fi
}


# pretty print csv file
clcsv(){
    column -s, -t < $1 | less -#2 -N -S
}


# search files and travel to directory of file
# -a option will search all files including hidden
fid(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    if [ "x$p" = "x" ]; then
        local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
    fi
 
    local d=${p%/*}
    if [ "x$d" != "x" ]; then
        cd "$d"
    fi
}

# search files and open directory of file with vim
fvd(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    if [ "x$p" = "x" ]; then
        local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
    fi
 
    local d=${p%/*}
    if [ "x$d" != "x" ]; then
        cd "$d" && nvim "$d" && cd -
    fi

}

# search all files in current directory, open in vim, return to current directory when done
fv(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    if [ "x$p" = "x" ]; then
        local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
    fi

    local d=${p%/*}
    if [ "x$p" != "x" ]; then
        if [ "$p" != "$d" ]; then # if in a new directory
            cd "$d" && nvim "$p" && cd -
        else
            nvim "$p"
        fi 

        
    fi
}

# search directories in code directory and open directory in vim
fiv(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    if [ "x$p" = "x" ]; then
        local p=$(fd -u -d 1 --type directory . $HOME/Code | fzf --preview "exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension ")
    fi

    local d=${p%/*}
    if [ "x$p" != "x" ]; then
        if [ "$p" != "$d" ]; then # if in a new directory
            cd "$d" && nvim "$p" 
        else
            nvim "$p"
        fi 
    fi
}


# search directories, preview files/dir as tree and open directory
f(){
    cd $(fd -u --type directory | fzf --preview "exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension ")
        
}

# search directories, preview files/dir as tree and open directory
fv-remote(){
    nvim scp://192.168.0.60//$(ssh 192.168.0.60 'bin/fd --hidden -u --type file . /' | fzf )
        
}

# search through code directory  and preview files/dir as tree
fic(){
    cd $(fd -u -d 1 --type directory . $HOME/Code | fzf --preview "exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension")
}


# search unique file history and copy output to terminal 
fh(){
     print -z $( history | cut -c 8- | sort | uniq | fzf --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g') 
}


# find in files
# Will break if file path contains a colon!
fif(){
    local RG_PREFIX='rg --column --line-number --no-heading --color=always --smart-case  -g "!{node_modules/*,.git/*}"'
    local INITIAL_QUERY="${*:-}"
    local fzf_result=$(FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
      fzf --ansi \
          --disabled \
          --query "$INITIAL_QUERY" \
          --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
    local result=${fzf_result%%:*}
    local line_no=$(echo $fzf_result | cut -d: -f2)

    if [ "x$result" != "x" ]; then
        nvim +$line_no $result
    fi
}

# Find program: search through executable command in path - preview with tldr page
fp(){
    local p=$(compgen -c | sed '/^_/d'| fzf --preview "tldr {}")
    print -z $p
}


# search through processes and kill the selected one
# TODO: make output prettier (shorter)
fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}


v(){
    if  [ "x$1" = "x" ]; then
        nvim . -c "Telescope find_files" 
    else
        nvim "$1"
    fi
}

img(){
    kitty +kitten icat $1
}


ezcroc(){
    croc send --code give-me-$1 $1 
}

lzcommit() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "You are not inside a Git repository."
        return
    fi

    if [ -z "$(git status --porcelain)" ]; then
        echo "No changes detected in the Git repository."
        return
    fi

    local msg=$(git -c pager.diff='less -R' diff | hey-gpt 'write me a succinct git commit messsage for these changes' --convo-length 0 --chat-model "gpt-3.5-turbo-16k")
    echo $msg
    read -q "response?Do you want to commit? (y/n): "
    if [[ $response == "y" ]]; then
        git commit -am "$msg"
        echo "Committed!"
    elif [[ $response == "n" ]]; then
        echo "Not committed"
    else
        echo "Invalid response."
    fi
}


